[1/9] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D E:\Documents\ESP32\CAN_Bus\TWAI_MotorControl\build\bootloader\esp-idf\esptool_py && E:\SoftWare\Esp_idf\esp-idf\Espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe E:/SoftWare/Esp_idf/esp-idf/Espressif/frameworks/esp-idf-v5.3.1/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 E:/Documents/ESP32/CAN_Bus/TWAI_MotorControl/build/bootloader/bootloader.bin"
Bootloader binary size 0x6880 bytes. 0x780 bytes (7%) free.
[2/7] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/TWAI_MotorControl.c.obj
[3/7] Linking C static library esp-idf\main\libmain.a
[4/7] Generating ld/sections.ld
[5/7] Linking CXX executable TWAI_MotorControl.elf
[6/7] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated E:/Documents/ESP32/CAN_Bus/TWAI_MotorControl/build/TWAI_MotorControl.bin
[7/7] cmd.exe /C "cd /D E:\Documents\ESP32\CAN_Bus\TWAI_MotorControl\build\esp-idf\esptool_py && E:\SoftWare\Esp_idf\esp-idf\Espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe E:/SoftWare/Esp_idf/esp-idf/Espressif/frameworks/esp-idf-v5.3.1/components/partition_table/check_sizes.py --offset 0x8000 partition --type app E:/Documents/ESP32/CAN_Bus/TWAI_MotorControl/build/partition_table/partition-table.bin E:/Documents/ESP32/CAN_Bus/TWAI_MotorControl/build/TWAI_MotorControl.bin"
TWAI_MotorControl.bin binary size 0x2f6b0 bytes. Smallest app partition is 0x100000 bytes. 0xd0950 bytes (81%) free.
