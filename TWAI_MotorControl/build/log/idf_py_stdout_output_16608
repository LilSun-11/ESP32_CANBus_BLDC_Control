[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D E:\Documents\ESP32\CAN_Bus\TWAI_MotorControl\build\bootloader\esp-idf\esptool_py && E:\SoftWare\Esp_idf\esp-idf\Espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe E:/SoftWare/Esp_idf/esp-idf/Espressif/frameworks/esp-idf-v5.3.1/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 E:/Documents/ESP32/CAN_Bus/TWAI_MotorControl/build/bootloader/bootloader.bin"
Bootloader binary size 0x6880 bytes. 0x780 bytes (7%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/TWAI_MotorControl.c.obj
[3/8] Linking C static library esp-idf\main\libmain.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable TWAI_MotorControl.elf
[6/8] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated E:/Documents/ESP32/CAN_Bus/TWAI_MotorControl/build/TWAI_MotorControl.bin
[7/8] cmd.exe /C "cd /D E:\Documents\ESP32\CAN_Bus\TWAI_MotorControl\build\esp-idf\esptool_py && E:\SoftWare\Esp_idf\esp-idf\Espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe E:/SoftWare/Esp_idf/esp-idf/Espressif/frameworks/esp-idf-v5.3.1/components/partition_table/check_sizes.py --offset 0x8000 partition --type app E:/Documents/ESP32/CAN_Bus/TWAI_MotorControl/build/partition_table/partition-table.bin E:/Documents/ESP32/CAN_Bus/TWAI_MotorControl/build/TWAI_MotorControl.bin"
TWAI_MotorControl.bin binary size 0x2f6b0 bytes. Smallest app partition is 0x100000 bytes. 0xd0950 bytes (81%) free.
[7/8] cmd.exe /C "cd /D E:\SoftWare\Esp_idf\esp-idf\Espressif\frameworks\esp-idf-v5.3.1\components\esptool_py && E:\SoftWare\Esp_idf\esp-idf\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=E:/SoftWare/Esp_idf/esp-idf/Espressif/frameworks/esp-idf-v5.3.1 -D SERIAL_TOOL=E:/SoftWare/Esp_idf/esp-idf/Espressif/python_env/idf5.3_py3.11_env/Scripts/python.exe;;E:/SoftWare/Esp_idf/esp-idf/Espressif/frameworks/esp-idf-v5.3.1/components/esptool_py/esptool/esptoesptool.py --chip esp32 -p COM3 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 4MB 0x1000 bootloader/bootloader.bin 0x10000 TWAI_MotorControl.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.8.1
Serial port COM3
Connecting....
Chip is ESP32-D0WD-V3 (revision v3.1)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
Crystal is 40MHz
MAC: 30:c9:22:32:cd:50
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x0003ffff...
Flash will be erased from 0x00008000 to 0x00008fff...
SHA digest in image updated
Compressed 26752 bytes to 16371...
Writing at 0x00001000... (100 %)
Wrote 26752 bytes (16371 compressed) at 0x00001000 in 0.7 seconds (effective 314.4 kbit/s)...
Hash of data verified.
Compressed 194224 bytes to 104032...
Writing at 0x00010000... (14 %)
Writing at 0x0001caaa... (28 %)
Writing at 0x000224a9... (42 %)
Writing at 0x00028375... (57 %)
Writing at 0x0002eef8... (71 %)
Writing at 0x000370f9... (85 %)
Writing at 0x0003d41e... (100 %)
Wrote 194224 bytes (104032 compressed) at 0x00010000 in 2.6 seconds (effective 605.0 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 424.1 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
ol.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=E:/Documents/ESP32/CAN_Bus/TWAI_MotorControl/build -P E:/SoftWare/Esp_idf/esp-idf/Espressif/frameworks/esp-idf-v5.3.1/components/esptool_py/run_serial_tool.cmake"
